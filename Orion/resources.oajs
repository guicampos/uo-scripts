//#include lib.oajs
//#include general.oajs
var maxSearchDistance = 20;
var axe_graphic = '0x0F4B'
var axe_color = '0x0B01'
var wood_key_serial = '0x47C25209'
var pulse_time = 150;

/**
 * Description
 * @method loop_cut_trees
 * @return 
 */
function loop_cut_trees()
{
    Orion.ClearJournal();
    var treeWorldLocation = _findTreesInSurrArea();
    for (i = 0; i < treeWorldLocation.length; i++)
    {
        Orion.Print('Chopping tree. ' + (treeWorldLocation.length - i) + ' trees left to chop. ');
        Orion.RequestContextMenu(wood_key_serial);
        Orion.WaitContextMenuID(wood_key_serial, 2);
        if (Orion.WaitForGump(1000))
        {
            var gump0 = Orion.GetGump('last');
            if ((gump0 !== null) && (!gump0.Replayed()) && (gump0.ID() === '0x06ABCE12'))
            {
                gump0.Select(Orion.CreateGumpHook(0));
                Orion.Wait(pulse_time);
            }
        }
        Orion.Wait(500);
        Orion.WalkTo(treeWorldLocation[i][0], treeWorldLocation[i][1], 0);
        Orion.Wait(2000);
        Orion.UseType(axe_graphic, axe_color);
        Orion.WaitTargetTile('tree', treeWorldLocation[i][0], treeWorldLocation[i][1], 0);
        Orion.Wait(2000);
        if (Orion.InJournal('in your backpack|but fail to produce', 'sys'))
            _lumberAgain(treeWorldLocation[i][0], treeWorldLocation[i][1]);

    }
}

/**
 * Description
 * @method _findTreesInSurrArea
 * @return treeWorldLocations
 */
function _findTreesInSurrArea()
{
    var treeWorldLocations = _createArr(400, 400);
    var trueWorldLocCounter = 0;
    for (i = (Player.X() - maxSearchDistance); i < (Player.X() + maxSearchDistance + 1); i++)
    {
        for (j = (Player.Y() - maxSearchDistance); j < (Player.Y() + maxSearchDistance + 0); j++)
        {
            if (Orion.ValidateTargetTile('tree', i, j))
            {
                //Orion.Print("Found a tree, location is saved as " + (trueWorldLocCounter + 1));
                treeWorldLocations[trueWorldLocCounter][0] = i;
                treeWorldLocations[trueWorldLocCounter][1] = j;
                trueWorldLocCounter++;
            }
        }
    }
    treeWorldLocations.length = trueWorldLocCounter;
    return treeWorldLocations;
}

/**
 * Description
 * @method _lumberAgain
 * @param {} x
 * @param {} y
 * @return 
 */
function _lumberAgain(x, y)
{
    var text = 'wood here to harvest|no logs|have been destroer|too far away|You can';
    while (!Player.Dead())
    {
        Orion.RequestContextMenu(wood_key_serial);
        Orion.WaitContextMenuID(wood_key_serial, 2);
        if (Orion.WaitForGump(1000))
        {
            var gump0 = Orion.GetGump('last');
            if ((gump0 !== null) && (!gump0.Replayed()) && (gump0.ID() === '0x06ABCE12'))
            {
                gump0.Select(Orion.CreateGumpHook(0));
                Orion.Wait(pulse_time);
            }
        }
        Orion.UseType(axe_graphic, axe_color);
        Orion.WaitTargetTile('tree', x, y, 0);
        var msg = Orion.WaitJournal(text, Orion.Now(), Orion.Now() + 5000, 'sys|my');
        if (msg != null) break;
        Orion.Wait(1000);
    }
    Orion.ClearJournal();
}


/**
 * Description
 * @method _useSkill_discordance
 * @return 
 */
function _useSkill_discordance()
{
    types = "0x00D5|0x001E|0x005A|0x0080|0x019|0x033D"
    while (true)
    {
        target = Orion.FindType(types, 'any', 'ground', 'near|fast');
        Orion.UseSkill('Discordance');
        Orion.WaitForTarget(1000);
        if (Orion.InJournal('shall you play', 'system'))
        {
            Orion.Wait(2000);
            Orion.TargetType('0x0E9D', 'any', 'backpack');
            Orion.ClearJournal();
        }
        Orion.Wait(1000);
        Orion.WaitTargetObject(target);
        while (Orion.InJournal('You attempt to disrupt', 'system'))
        {
            Orion.UseSkill('Discordance');
            Orion.Wait(1000);
            Orion.WaitTargetObject(target);
            Orion.ClearJournal();
        }
        if (Orion.InJournal('suppressing', 'system') || Orion.InJournal('is already', 'system'))
        {
            Orion.Wait(1000);
            Orion.Cast('Invisibility');
            Orion.WaitTargetObject('self');
            Orion.Wait(18000);
            Orion.ClearJournal();
        }
        Orion.Wait(3000);
    }
}

/**
 * Description
 * @method mine
 * @return 
 */
function mine()
{
    Orion.ClearJournal('mine there');
    Orion.ClearJournal('no metal here');
    while (true)
    {

        if (!Orion.UseType('0x0E85')) break;
        Orion.WaitTargetTile('mine');
        Orion.Wait(1000);

        if (Orion.LastJournalMessage().Text().indexOf('overloaded'))
        {
            ores = Orion.FindType('0x19B7|0x19B8|0x19B9|0x19BA', 'any');

            for (var i = 0; i < ores.length; i++)
            {
                Orion.UseObject(ores[i]);
                Orion.WaitForTarget(2000);
                Orion.TargetObject('0x4233FDB4')
            }

            Orion.RequestContextMenu('0x468639AA');
            Orion.WaitContextMenuID('0x468639AA', 2);
            if (Orion.WaitForGump(1000))
            {
                var gump0 = Orion.GetGump('last');
                if ((gump0 !== null) && (!gump0.Replayed()) && (gump0.ID() === '0x06ABCE12'))
                {
                    gump0.Select(Orion.CreateGumpHook(0));
                    Orion.Wait(pulse_time);
                }
            }

        }
    }
}


/**
 * Description
 * @method sortItems
 * @return 
 */
function sortItems()
{
    var obj = {
        type: 0x1F14,
        color: 0x0000
    };
    var posX = {
        start: 30,
        end: 93,
        offset: 8
    };
    var posY = {
        start: 41,
        end: 99,
        offset: 8
    };
    var i = 0;

    posX.count = Math.floor((posX.end - posX.start) / posX.offset);
    posX.start += Math.floor(((posX.end - posX.start) - (posX.offset * posX.count)) / 2);

    posY.count = Math.floor((posY.end - posY.start) / posY.offset);
    posY.start += Math.floor(((posY.end - posY.start) - (posY.offset * posY.count)) / 2);


    var items = Orion.FindTypeEx(obj.type, obj.color, '0x4463D25E');

    for (var y = posY.start; y <= posY.start + (posY.offset * posY.count); y += posY.offset)
    {
        for (var x = posX.start; x <= posX.start + (posX.offset * posX.count); x += posX.offset)
        {
            if (!items.length || i > items.length - 1)
                return;

            var item = items[i];

            if (item.X() != x || item.Y() != y)
            {
                Orion.MoveItem(item.Serial(), 0, '0x4463D25E', x, y, 0);
                Orion.Wait(800);
            }

            ++i;
        }
    }
}




/**
 * Description
 * @method scavenger_init
 * @return 
 */
function scavenger_init()
{
    largebagSerial = '0x4557C796';
    while (true)
    {
        target = null;
        scavenger_recursive(target, largebagSerial);
    }

}

/**
 * Description
 * @method scavenger_recursive
 * @param {} target
 * @param {} largebagSerial
 * @return 
 */
function scavenger_recursive(target, largebagSerial)
{
    // todo - remove items without Name
    // check locket chests
    // open locked chests
    var search_range = 2;
    Orion.AddHighlightArea('areaGraph', 300000, 'pos', 1990, search_range, search_range, 'land', Player.X(), Player.Y());
    ignoreList_name = 'event_fixed_objs';
    var searchon = target == null ? 'ground' : target
    //    Orion.FindTypeEx('graphic', 'color', 'container', 'flags', 'distance', 'notoriety', recurse, ignoreList_name);
    Orion.FindTypeEx('any', 'any', searchon, 'item', search_range, '', true, ignoreList_name).forEach(function(found)
    {
        Orion.Print(largebagSerial)
        Orion.MoveItem(found.Serial(), 0, largebagSerial);
        Orion.Wait(150);
        journalmsg_ignore = Orion.InJournal("can not pick that up|not allowed to access this|That is secure", "system");
        journalmsg_ignore = Orion.InJournal("That is too far away", "system");
        Orion.ClearJournal();
        if (journalmsg_ignore)
        {
            myIgnoreList = Orion.GetIgnoreList(ignoreList_name);
            list_items = myIgnoreList.Items();
            //add to ignore list
            list_items.push(new IgnoreListItem('', '', found.Serial(), found.Name()));
            myIgnoreList.SetItems(list_items);
            Orion.UpdateIgnoreList(myIgnoreList);
            if (Orion.Contains(found.Properties(), 'Contents: ') && Orion.OpenContainer(found.Serial(), 1500) == true)
            {
                scavenger_recursive(found.Serial(), largebagSerial)
            }
        }
        else
        {
            Orion.Wait(800);
        }

    });
    Orion.Wait(10); // end FindTypeEx
    Orion.RemoveHighlightArea('areaGraph');
}
