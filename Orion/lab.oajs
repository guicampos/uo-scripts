
healing_methods = 
[
   {//use bandages if health < 90% OR Poisoned OR Bleed. 
      'name': 'BandageSelf',
      'enabled': true,
      'object_type':'0x0E21',
      'object_color':'any',
      'usage': 'bandageself',
      'criterion': '(Player.Hits("%") <= 90 || Player.Poisoned()) && ! Player.YellowHits()',
      'cooldown_timer': (11 - (Player.Dex() / 20) + 1.25) * 1050,
      'still_on_cooldown_messages': 'fingers slip', // indicates if still on cooldown
      'not_on_cooldown_messages': 'You have been cured of all poisons|You finish appling the bandages', // indicates a failure or success that makes the timer reset or not
      'cooldown_start_moment': on_action
   },
   {// Use Mothers Kiss Pot if health <60% AND not poisoned AND not mortal.
      'name': 'MotherKiss',
      'enabled': true,
      'object_type':'0x0F0C',
      'object_color':'0x0000',
      'usage': 'quaff',
      'criterion': 'Player.Hits("%") <= 60 && (!Player.Poisoned() && !Player.YellowHits()) && is_on_cooldown("BandageSelf")',
      'cooldown_timer':'5000',
      'still_on_cooldown_messages': 'before using another healing potion', // indicates if still on cooldown
      'not_on_cooldown_messages': 'some damage has been healed', // indicates a failure. Reset cooldown
      'cooldown_start_moment': on_message
   }, 
   {// Use Cure Pot If Poisoned AND Health <80%.
      'name': 'GreaterCure',
      'enabled': true,
      'object_type':'0x0F07',
      'object_color':'0x0000',
      'usage': 'quaff',
      'criterion': 'Player.Poisoned()  && is_on_cooldown("BandageSelf")',
      'cooldown_timer':'500',
      'still_on_cooldown_messages': '', // indicates if still on cooldown
      'not_on_cooldown_messages': 'are not poisoned', // indicates a failure. Reset cooldown
      'success_messages': 'feel cured of poison', // reset cooldown
      'cooldown_start_moment': on_message
   }, 
   {// Use Refresh Pot if Stamina <60%. 
      'name': 'GreaterRefresh',
      'enabled': true,
      'object_type':'0x0F0B',
      'object_color':'0x0000',
      'usage': 'quaff',
      'criterion': 'Player.Stam("%") <= 55',
      'cooldown_timer':'10000',
      'still_on_cooldown_messages': '', // indicates if still on cooldown
      'failure_messages': '', // indicates a failure. Reset cooldown
      'success_messages': '', // reset cooldown
      'cooldown_start_moment': on_message
   }, 
   {// Use Apple If Mortal AND Health <60%.
      'name': 'EnchantedApple',
      'enabled': true,
      'object_type':'0x2FD8',
      'object_color':'0x0488',
      'usage': 'use',
      'criterion': 'Player.Hits("%") <= 90 && Player.YellowHits()',
      'cooldown_timer':'40000',
      'still_on_cooldown_messages': 'for another apple at this time', // indicates if still on cooldown
      'not_on_cooldown_messages': 'lifts all curses from your soul', // indicates a failure. Reset cooldown
      'cooldown_start_moment': on_message
   }, 
   {// Use Bread If Mortal AND Health <60% AND Apple on cooldown.
      'name': 'BlessingBread',
      'enabled': true,
      'object_type':'0x103B',
      'object_color':'0x090E',
      'usage': 'use',
      'criterion': 'Player.Hits("%") <= 90 && Player.YellowHits() && is_on_cooldown("EnchantedApple")',
      'cooldown_timer':'30000',
      'still_on_cooldown_messages': 'effective at this time', // indicates if still on cooldown
      'not_on_cooldown_messages': 'but still lifts all curses', // indicates a failure. Reset cooldown
      'cooldown_start_moment': on_message
   },
]



var methods_by_name = _list_of_objects_indexed_by_property(healing_methods, "name");

function loop_methods()
{
//	enabled_healing_methods = healing_methods.filter
   while(true)
   {
      
      healing_methods
      .filter(function(method){
	      if (method.usage !== 'spell')
	      {
	      	return method.enabled && eval(method.criterion) && !is_on_cooldown(method) && Orion.FindType(method.object_type, method.object_color, backpack, 'item|fast').length > 0;
      	}
      })
      .forEach(function(method)
      {
			
			Orion.Print(1988, 'healing with ' + method.name)
         	switch(method.usage)
         	{
	         	case 'bandageself': 
			         	Orion.BandageSelf();
         				Orion.SetTimer(method.name+"_timer", 0)
		         	break;
	         	case 'quaff': 
						toggleWeapon();
		   	         	Orion.UseType(method.object_type, method.object_color, backpack, true)
						Orion.SetTimer(method.name+"_timer", 0)
			         	toggleWeapon();
		         	break;
	         	case 'use': 
		    	    	Orion.UseType(method.object_type, method.object_color, backpack, true)
   	    				Orion.SetTimer(method.name+"_timer", 0)
	         	break;
         	}
         Orion.Wait(10)
         
      });
         Orion.Wait(10)      
   }
}


function get_method_timer(method)
{
    if (!Orion.TimerExists(method.name+"_timer"))
    {
        Orion.SetTimer(method.name+"_timer", method.cooldown_timer+1000)
    }
    
    return Orion.Timer(method.name+"_timer")
}

function is_on_cooldown(method)
{
   // by timer
   if ( method.cooldown_timer > 0 && get_method_timer(method) >= method.cooldown_timer ) // timer
   {
      return false;
   }
   else
   {
      return true;
   }

   // default is assume it's not on cooldown
   return false;
   
}


/**
 * Description
 * @method toggleWeapon
 * @return Literal
 */
function toggleWeapon()
{

    var currentRHand = Orion.ObjAtLayer('1');
    var currentLHand = Orion.ObjAtLayer('2');

	Orion.RemoveObject('last_weaponRH');
	Orion.RemoveObject('last_weaponLH');

     if (currentLHand !== null)
     {
         Orion.AddObject('last_weaponLH', currentLHand.Serial());
     }
     
    if (currentRHand !== null) // rh is equiped. Unequip
    {
        if (Orion.Contains(currentRHand.Properties(), 'Balanced') || Orion.Contains(currentLHand.Properties(), 'Balanced'))
        {
            return true;
        }

        Orion.AddObject('last_weaponRH', currentRHand.Serial());

        Orion.Unequip('1');
    }
    else // rh is unequiped. Check if has a last_weapon and equip
    {
        	if (Orion.GetSerial('last_weaponLH').length > 0 && Orion.ObjAtLayer('2'))
        	{
	            Orion.Unequip('2');
	        	Orion.Wait(450);
        	}

        Orion.Equip(Orion.GetSerial('last_weaponLH'));

		if (Orion.GetSerial('last_weaponRH').length > 0)
		{
    	    Orion.Wait(600);
	        Orion.Equip(Orion.GetSerial('last_weaponRH'));
        }

	}
    return true;
}




var on_action = 1
var on_message = 2

/**
 * takes a list of objects and an attribute, and returns an object that has the attribute values as keys and the corresponding objects as values
 * @method _sort_object_list_by_property
 * @param {array} list
 * @param {string} property
 * @return list of objects
 * @example sortByProperty(list, "age");
 */
function _list_of_objects_indexed_by_property(list, property) {
    var indexed = {};
    for (var i = 0; i < list.length; i++) {
        var obj = list[i];
        var key = obj[property];
        indexed[key] = obj;
    }
    return indexed;
}