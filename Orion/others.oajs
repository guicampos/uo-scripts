function inventory_handler()
{
    Orion.ClearJournal();
	while (! Player.Dead())
	{
		map_check = Orion.InJournal('.map', 'self');
	
		if (map_check&&map_check.Text().length > 0)
		{
			Orion.Exec("inventory_map", true);
	        Orion.ClearJournal();
		}
        
		range_check = Orion.InJournal('.range', 'self');
	
		if (range_check&&range_check.Text().length > 0)
		{
            Shared.RemoveVar('range');
	        Shared.AddVar('range', range_check.Text().split(' ')[1]);
            Orion.Print('Search range is now ' + range_check.Text().split(' ')[1]);
	        Orion.ClearJournal();
		
		}

		commit_check = Orion.InJournal('.commit', 'self');
	
		if (commit_check&&commit_check.Text().length > 0)
		{
			inventory_commit();
	        Orion.ClearJournal();
		}

		stop_check = Orion.InJournal('.stop', 'self');
	
		if (stop_check&&stop_check.Text().length > 0)
		{
            Shared.RemoveVar('project_name');
            Shared.RemoveVar('range');
	        Orion.ClearJournal();
            Orion.Print('Ok, bye!');
            return true;
		}		

		reset_check = Orion.InJournal('.reset', 'self');
	
		if (reset_check&&reset_check.Text().length > 0)
		{
			Orion.ClearFakeMapObjects();
	        Orion.ClearJournal();
		}
		
		label_check = Orion.InJournal('.label', 'self');
	
		if (label_check&&label_check.Text().length > 0)
		{
	        Shared.AddVar('label', label_check.Text());
	        Orion.ClearJournal();
		}
        
		mode_check = Orion.InJournal('.containers_only', 'self');
	
		if (mode_check&&mode_check.Text().length > 0)
		{
            containers_only = Shared.GetVar('containers_only', 'off');
            Shared.RemoveVar('containers_only');
            
            if (containers_only == 'on')
                Shared.AddVar('containers_only', 'off');
            else
                Shared.AddVar('containers_only', 'on');
	        Orion.ClearJournal();
		}

	Orion.Wait(50);
	}

}

function inventory_init()
{
	project_name = Orion.InputText(60000, 'Type a project name');
	if (project_name.length <= 0)
    {
        Orion.Print(1990, 'A Project name is required.');
        return false;
    }    

	Shared.ClearVars();
	list_of_items = Orion.GetFindList(project_name);
	file_name = project_name.replace(' ', '')+'.csv';
	Shared.AddVar('project_name', project_name);
	Shared.AddVar('range', 1);
	
	Orion.Print(2213, '-=| Inventory project for'+project_name+' |=-');
	Orion.Print(2498,'  |You can now proceed to map the place using the "inventory_map" function.');	
	Orion.Print(2498,'  |Type ".map" to map an area named [.label] delimited by [.range].');
    Orion.Print(2498,'  |Type ".label" <string> to set a label for the mapping. Default empty.');
	Orion.Print(2498,'  |Type ".range" <number> to set the search range. Default 1.');
	Orion.Print(2498,'  |Type ".commit" to finish the project and generate the final csv file.');
    Orion.Print(2498,"  |Type \".containers_only\" to invertory only items inside containers, ignoring items on the ground (default 'off').");
	Orion.Print(2498,'  |Type ".quit" leave the project handler.');
	Orion.Print(2498,'created by Velland');
	
	Orion.Exec('inventory_handler', true);
	
}

function inventory_commit()
{
	var project_name = Shared.GetVar('project_name', '');	
    
	if(project_name.length < 1 )
	{
		Orion.Print('Project not initiated. Please run inventory_init first.');
		return false;
	}
	
    var csv_header = ["serial", "name", "graphic", "color", "is container", "Contents Count", "parent container serial", "parent container name", "XYZ location", "level", "label", "all details"];	
	file_name = Orion.CurrentScriptDirPath()+'/'+project_name+'.csv';
	csv_file = Orion.NewFile();
	csv_file.Open(file_name, true);
    
	if (! csv_file)
	{
		csv_file.Open(file_name);	
	    csv_file.Write(csv_header.join(';'));
	    csv_file.Write("\n");
	}
	else
	{
		csv_file.Append(file_name);		
	}

	project_list = Orion.GetIgnoreList(project_name);
	list_items = project_list.Items();
	
	list_items.forEach(function(item){
		csv_file.Write(item.Comment());
		csv_file.Write("\n");		
	});
	
	csv_file.Close();
	
	Orion.Print(list_items.length+'Lines commited to file '+file_name);
}

function inventory_report_item(item, level, label)
{
    var containers_only = Shared.GetVar('containers_only', 'off');
    if (containers_only == 'on' && item.Container() == '0XFFFFFF')
        return null;
        
    var is_container = 'no';
    var contains_qty = getContents_qty(item);

    if (contains_qty > 0) 
    {
        is_container = Orion.Contains(item.Properties(), 'Contents') != null ? 'yes' : 'no';
	    Orion.OpenContainer(item.Serial(), 1000);
        Orion.WaitForContainerGump();
    }

    parent_container_serial = item.Container() != null? item.Container() : '--';
    parent_container_name = Orion.FindObject(parent_container_serial) != null? Orion.FindObject(parent_container_serial).Name() : 'ground';
    comment_field = [item.Serial().toString(), item.Name(), item.Graphic().toString(), item.Color().toString(), is_container.toString(), contains_qty.toString(), parent_container_serial, parent_container_name, item.X().toString()+","+item.Y().toString()+","+item.Z().toString(), level, label, JSON.stringify(item.Properties())].join(';');

    return new IgnoreListItem(item.Graphic(), item.Color(), item.Serial(), comment_field);
    
}

function inventory_map()
{

	var project_name = Shared.GetVar('project_name', '');	
	if(project_name.length < 1 )
	{
		Orion.Print('Project not initiated. Please run inventory_init first.');
		return false;
	}

	range = parseInt(Shared.GetVar('range', 1));
	label = Shared.GetVar('label', '');
    containers_only = Shared.GetVar('containers_only', 'off');

	// Every mapping have a color so it's esier to check each mapping boundaries.
	color = Orion.Random(1000,2000);    
	Orion.Print(color, 'Mapping '+label);
    Orion.Print(color, 'Range['+distance+'], Containers only[' +containers_only+']');
	
	// Get the titles to be searched. It's a cube measuring X,Y,Z. 
	//Why a Cube? Because people likes to create those crazy walls full of stacked chests.
	tilesinrect = []

	for (var xsearch = Player.X() - range; xsearch  < Player.X() + range; xsearch++)
	{
		for (var ysearch = Player.Y() - range; ysearch  < Player.Y() + range; ysearch++)
		{

			for (var zsearch = Player.Z(); zsearch  < Player.Z() + 18; zsearch++)
			{
				tilesinrect.push({'x':xsearch,'y':ysearch,'z':zsearch});
			}
		}
	}

	report_lines = []
	// For each tile inside the cube, search for items.
	tilesinrect.forEach(function(tile){
			//Orion.AddFakeMapObject(tile.x.toString()+tile.y.toString()+Math.abs(tile.z).toString(), '0x3EF1', color, tile.x, tile.y, tile.z);			
		    //Orion.Wait(1);
			xyz = 'xyz: '+tile.x+','+ tile.y+','+ tile.z;
			//Orion.Print(xyz)
			Orion.FindTypeEx('any', 'any', 'ground', 'item', xyz, '', true)
			.filter(function(item){ if (item.Name() && item.Name() != "") return item})
			.forEach(function(item){
		        level=1;
		        // Level 1
		        //report items on the ground/world
                item_created = inventory_create_item(item, level, label);
                if (item_created !=null)
                    report_lines.push(item_created);
                    
		        if (Orion.Contains(item.Properties(), 'Contents'))
		        {
		            Orion.FindTypeEx('any', 'any', item.Serial(), 'item', 'finddistance', '', true).forEach(function(item)
		            {
		                level=2;
		                // Level 2
		                //report single item    
		                 report_lines.push(new IgnoreListItem(item.Graphic(), item.Color(), item.Serial(), inventory_report_item(item, level, label).join(';')));
		                if (Orion.Contains(item.Properties(), 'Contents')) 
		                {
		                    Orion.FindTypeEx('any', 'any', item.Serial(), 'item','finddistance', '', true).forEach(function(item)
		                    {
		                        level=3;
		                        // Level 3
		                        //report single item    
		                         report_lines.push(new IgnoreListItem(item.Graphic(), item.Color(), item.Serial(), inventory_report_item(item, level, label).join(';')));
		                        if (Orion.Contains(item.Properties(), 'Contents')) 
		                        {
		                                Orion.FindTypeEx('any', 'any', item.Serial(), 'item', 'finddistance', '', true).forEach(function(item)
		                                {
		                                    level=4;
		                                    // Level 4
		                                    //report single item                
		                                     report_lines.push(new IgnoreListItem(item.Graphic(), item.Color(), item.Serial(), inventory_report_item(item, level, label).join(';')));
		                                    if (Orion.Contains(item.Properties(), 'Contents')) 
		                                    {
		                                        Orion.FindTypeEx('any', 'any', item.Serial(), 'item', 'finddistance', '', true).forEach(function(item)
		                                        {
		                                            level=5;
		                                            // Level 5
		                                            //report single item
		                                            report_lines.push(new IgnoreListItem(item.Graphic(), item.Color(), item.Serial(), inventory_report_item(item, level, label).join(';')));
		                                        });
		                                    }
		                                });
		                        }
		                    });
		                }
		            });
		        }
			});
	});
	
	if (report_lines.length > 0)
	{
		var project_list = Orion.GetIgnoreList(project_name);
		var list_items = project_list.Items();
		var new_list_items = [];
		var flags = {};
		var index;
		var repeatedlist=0;
		var merged_list_items = list_items.concat(report_lines);
		//Orion.Print('list_items:'+list_items.length)
		//Orion.Print('report_lines:'+report_lines.length)
	
		if (list_items.length < 1)
			new_list_items = report_lines;
		else
		{		     	
			for (index = 0; index < merged_list_items.length; ++index) 
            {

			    if (!flags[merged_list_items[index].Serial()]) 
                {
			        flags[merged_list_items[index].Serial()] = true;
			        new_list_items.push(merged_list_items[index]);
			    }
			    else
			    	repeatedlist++;
			}
		}
	
		rep = '';
		if (repeatedlist > 0) 
			rep = '('+repeatedlist+' repetitions discarded)';
		Orion.Print((new_list_items.length-list_items.length)+' objects added to the list.'+rep);
	    project_list.SetItems(new_list_items);
	
	
		Orion.UpdateIgnoreList(project_list);	
	}

	Orion.Print(color,'End Mapping');
}

function getContents_qty(item)
{
    if (item)
    {
        searchResult = []
        var itemPropLines = item.Properties().split(/\n|\r/);
        for (var j = 0; j < itemPropLines.length; j++)
        {

            if (Orion.Contains(itemPropLines[j], 'Contents'))
            {
            	str = itemPropLines[j].substr(itemPropLines[j].lastIndexOf('Contents: ')+10,itemPropLines[j].lastIndexOf('Contents:')+2);
            	if (isNaN(str.slice(-1)))
            	{
            		str = str.substr(0,str.length-1);
            	}

                return parseInt(str);

            }
        }
    }
    return 0;
}