///////////////////////////////////////////////////////////////////////////////////////////
//////////////////// -Mining for UORPG server (17.05.2017) by Hotride- ////////////////////
///////////////////////////// -Minimal OA version 2.0.7.0- ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// -Настройка скрипта- ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
//
// Перед запуском требуется:
// 1) Настроить WayPoints - массив координат, на которых будут обкапываться тайлы вокруг
//    персонажа. Желательно записывать их так, что бы персонаж раскапывал как можно больше
//    тайлов пещеры, и не тратил много времени при перемещениями между точками.
// 2) Подготовка ресурсов.
//    При разгрузке в банк (UnloadToBank): указать ResultContainer как серийник банка
//    (_info на любую вещь в банке, C=0x... будет серийник банка), закинуть туда реги на
//    реколл, инструменты, указать OreBag в нем (или, может быть равен ResultContainer).
//    При разгрузке в контейнер у дома: указать его как ResultContainer, закинуть туда реги
//    на реколл, инструменты, указать OreBag в нем (или, может быть равен ResultContainer).
// 3) Задать Tool (если нужно копать конкретным инструментом), указать ToolType для
//    добора инструментов из ResultContainer, указать количество инструментов для добора
//    ToolsCount.
// 4) Указать серийники рун или рунбук с дефолтными рунами (в дом RuneHomeSerial и в пещеру
//    RuneCaveSerial), указать минимальное количество регов ReagentsCount, после которого
//    добирать их из ResultContainer.
// 5) Настроить использование хайда UseHiding.
// 6) Настроить расстояние для обкопки DigDistanceX и DigDistanceY.
// 7) Если нужно игнорировать некоторые руды при копки (не продолжать копать, если такая руда
//    попалась) то указать названия руды в IgnoreOreNames, либо оставить это поле пустым.
// 8) Если нужно сбрасывать какую-то руду после обкопки (или перед улетом домой) то
//    указать цвета руды в DropOreColors, либо оставить это поле пустым.
// 9) Настроить лимит веса MaxWeight.
// 
// Принцп работы скрипта:
// Запускаем непосредственно в пещере.
// Скрипт подходит к первой точке, обкапывает все тайлы вокруг на указанном расстоянии и
// переходит на следующую точку, повторяет до бесконечности (либо пока не убьют).
// При достижении лимита веса сбрасывает указанную руду на пол (под ноги), если перевес
// остался - летит на разгрузку и добор расходников.
// После этого - летит обратно в пещеру и идет на ту же точку, с которой улетел,
// продолжает обкопку.
// 
///////////////////////////////////////////////////////////////////////////////////////////

//Чем будем копать (серийник объекта), если пустая строка - ищет ToolType
var Tool = 'pickaxe';

//Тип кирки/лопаты, чем копать, можно указать несколько типов
var ToolType = '0x0E85';

//Количество инструментов для добора
var ToolsCount = 5;

//Контейнер с мешком для руды (или просто для руды, если не нужно скидывать ее в мешок)
var ResultContainer = '0x40024414';

//Контейнер, куда складывать руду (может быть равен ResultContainer, если для руды нет отдельного мешка в нем)
var OreBag = '0x4002447F';

//Разгрузка происходит в банк, true - да, false - разгружается в контейнер у дома (или где-то еще)
var UnloadToBank = true;

//Максимальный вес, при котором выкидывать лишнее из пака (если есть что-то лишнее), если вес не изменился - лететь домой разгружаться
var MaxWeight = Player.MaxWeight() - 30;

//Серийник руны в дом
var RuneHomeSerial = '0x400243DA';

//Серийник руны в перещу
var RuneCaveSerial = '0x400243E2';

//Текст физла заклинания
var FizzlesText = 'The spell fizzles';

//Сколько брать регов на реколл?
var ReagentsCount = 20;

//Текст удачной копки
var PutText = 'You put';

//Текст не удачной копки или режима вармода (если такое сообщение есть на сервере)
var FailText = 'You loosen some|thoughts of battle';

//Текст ошибки мининга (слишком далеко, не могу достать, сдох или что-то еще)
var StopText = 'There is nothing there to mine here|Try mining|away|no line of|reach that|слишком далеко';

//Какую руду прекращать копать, если попалась
var IgnoreOreNames = 'Iron|Rusty|Bronze';

//Какую руду (цвета руды) сбрасывать на землю, когда обрыли все тайлы вокруг себя
var DropOreColors = '0x0000|0x003B';

//Прятаться во время обкопки тайлов (true - прятаться, false - нет)
var UseHiding = false;

//Текст хайдинга
var HidingText = 'seem to hide|have hidden';

//Расстояние, на котором копать по X
var DigDistanceX = 2;

//Расстояние, на котором копать по Y
var DigDistanceY = 2;

//Список точек, на которых обкапывать тайлы вокруг себя
var WayPoints =
[
	[2558, 497],
	[2558, 492],
	[2563, 492],
	[2559, 487],
	[2564, 487],
	[2569, 487],
	[2562, 482],
	[2567, 482],
	[2572, 482],
	[2574, 486],
	[2578, 486],
	[2577, 482],
	[2582, 482],
	[2584, 486],
	[2589, 487],
	[2587, 482],
	[2591, 483],
	[2589, 478],
	[2594, 478],
	[2592, 474],
	[2596, 473],
	[2593, 469],
	[2597, 469],
	[2597, 465],
	[2593, 464],
	[2587, 465],
	[2583, 465],
	[2588, 469],
	[2586, 473],
	[2584, 477],
	[2579, 477],
	[2574, 477],
	[2569, 474],
	[2566, 477],
	[2562, 477],
	[2563, 472],
	[2558, 472],
	[2558, 468],
	[2563, 468],
	[2561, 464],
	[2566, 464],
	[2566, 460],
	[2573, 465],
	[2570, 460],
	[2571, 456],
	[2568, 455],
	[2570, 449],
	[2574, 451],
	[2570, 446],
	[2574, 443],
	[2576, 447],
	[2579, 445],
	[2579, 450],
	[2578, 454],
	[2583, 456],
	[2583, 452],
	[2586, 448],
	[2583, 446],
	[2578, 445],
	[2574, 443],
];

///////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////// -Глобальные переменные. Не изменять- //////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////

//Склейка текстов, что представлены выше.
var SearchText = PutText + '|' + FailText + '|' + StopText;

//Указатель на текущую точку
var CurrentWayPoint = 0;

var CurrentMinDropX = 0;

var CurrentMaxDropX = 0;

var CurrentDropX = 0;

var CurrentMinDropY = 0;

var CurrentMaxDropY = 0;

var CurrentDropY = 0;

///////////////////////////////////////////////////////////////////////////////////////////
//Основная фукнция
function Mining()
{

	//Роем бесконечно
	while (true)
	{
		//Проходимся по списку точек
		for (CurrentWayPoint = 0; CurrentWayPoint < WayPoints.length; CurrentWayPoint++)
		{
			var point = WayPoints[CurrentWayPoint];

			//Пытаемся прийти на точку
			if (WalkToPoint(point[0], point[1]))
			{
				//Пытаемся обкопать все вокруг себя
				if (!MiningHere(point[0], point[1]))
				{
					//Завершаем скрипт, если что-то пошло не так (только для теста, в дальнейшем заменить на какое-то действие)
					return;
				}
			}
		}

		//Обеспечение задержек в вечных циклах
		Orion.Wait(100);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////
//Функция обкопки тайлов вокруг персонажа
function MiningHere(x, y)
{
	//Сбрасываем вармод, если это необходимо
	if (Player.WarMode())
	{
		Orion.WarMode(false);
		Orion.Wait(100);
	}
	
	//Проход по квадрату
	for (var x = -DigDistanceX; x <= DigDistanceX; x++)
	{
		for (var y = -DigDistanceY; y <= DigDistanceY; y++)
		{
			//Роем, если вернулось false - максимальный вес достигнут
			if (!Dig(x, y))
			{
				Orion.Print(0x0022, 'Достигнут максимальный вес!');
				return false;
			}
	
			Orion.Wait(100);
		}
	}

	DropExtraOres();
	
	return true;
}
///////////////////////////////////////////////////////////////////////////////////////////
//Функция получения серийника инструмента
function GetTool()
{
	var obj = Orion.FindObject(Tool);

	if (obj == null)
	{
		var list = Orion.FindType(ToolType, -1, self);

		if (list.length)
			return list[0];
		else
		{
			list = Orion.FindType(ToolType);

			if (list.length)
				return list[0];
		}

		return '';
	}

	return obj.Serial();
}
///////////////////////////////////////////////////////////////////////////////////////////
//Функция выкапывания тайла
function Dig(x, y)
{
	//Пока живы - роем
	while (!Player.Dead())
	{
		//Прячемся
		if (UseHiding && !Player.Hidden())
		{
			Orion.UseSkill('Hiding');
			Orion.WaitJournal(HidingText, Orion.Now(), Orion.Now() + 7000, 'sys|my');
		}

		//Проверяем возможность наведения автотаргета на тайл
		if (!Orion.ValidateTargetTileRelative('mine', x, y))
			break;

		var toolSerial = GetTool();

		if (toolSerial == '')
		{
			Orion.Print('0x0021', 'Tool is not found!!!');
			Orion.Wait(1000);
			return false;
		}

		//Используем кирку и тыкаем со смещением относительно персонажа на тайл
		Orion.WaitTargetTileRelative('mine', x, y, 0);
		Orion.UseObject(toolSerial);
	
		var msg = Orion.WaitJournal(SearchText, Orion.Now(), Orion.Now() + 15000, 'sys|my');
	
		//Если сдохли - выходим из цикла
		if (Player.Dead())
			return false;
	
		//Если максимальный вес достигнут - пытаемся сбросить лишнюю руду на пол
		if (Player.Weight() >= MaxWeight)
		{
			DropExtraOres();

			//Если это не помогло (запас веса 50) - летим разгружаться
			if (Player.Weight() >= MaxWeight - 50)
				RecallUnload();
		}
	
		if (msg != null)
		{
			var text = msg.Text();

			//Если что-то упало в пак
			if (Orion.Contains(text, PutText))
			{
				//Если это нечто - игнорируемая руда - выходим из цикла
				if (Orion.Contains(text, IgnoreOreNames))
					break;
			}
			else if (Orion.Contains(text, FailText)) //Дернем вармод при физле/сообщении о том, что мы в вармоде
				Orion.WarMode(false);
			else if (Orion.Contains(text, StopText)) //Если нельзя достать до тайла или тут больше нет руды - выходим
				break;
		}
	
		Orion.Wait(100);
	}
	
	return true;
}
///////////////////////////////////////////////////////////////////////////////////////////
//Функция сброса предмета на землю, с проверкой на персонажа (под персонажей нельзя сбрасывать)
function DropGround(serial)
{
	var obj = Orion.FindObject(serial);

	if (obj == null)
		return false;

	var oldContainer = obj.Container();

	//Проходимся по координатам
	for (var x = CurrentDropX; x <= CurrentMaxDropX; x++)
	{
		for (var y = CurrentDropY; y <= CurrentMaxDropY; y++)
		{
			for (var i = 0; i < 3; i++)
			{
				Orion.Drop(serial, 0, x, y, Player.Z());
				Orion.Wait('moveitemdelay');

				if (oldContainer != obj.Container())
					return true;
			}
		}

		CurrentDropY = CurrentMinDropY;
	}

	CurrentDropX = CurrentMinDropX;

	return false;
}
///////////////////////////////////////////////////////////////////////////////////////////
//Функция сброса лишней руды
function DropExtraOres()
{
	//Если не указаны цвета руды - выходим
	if (DropOreColors == '')
		return;

	//Максимальная дистанция дропа
	var maxDropDistance = 1;

	//Минимальные и максимальные координаты для дропа
	CurrentMinDropX = Player.X() - maxDropDistance;
	CurrentMaxDropX = Player.X() + maxDropDistance;
	CurrentMinDropY = Player.Y() - maxDropDistance;
	CurrentMaxDropY = Player.Y() + maxDropDistance;

	CurrentDropX = CurrentMinDropX;
	CurrentDropY = CurrentMinDropY;

	//Крутим цикл, пока не сбросим всю руду
	while (true)
	{
		//Поиск всех типов руды всех указанных цветов
		var list = Orion.FindType('0x19B7|0x19BA|0x19B8|0x19B9', DropOreColors);

		//Ничего не нашлось - выходим
		if (!list.length)
			break;

		//Сбрасываем под ноги все что нашлось
		for (var i = 0; i < list.length; i++)
		{
			if (!DropGround(list[i]))
				return;

			Orion.Wait(100);
		}

		Orion.Wait(100);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////
//Функция разгрузки
function UnloadOres()
{
	if (UnloadToBank)
		Orion.Say('bank');
	else
		Orion.UseObject(ResultContainer);

	Orion.Wait(500);

	if (ResultContainer != OreBag)
	{
		Orion.UseObject(OreBag);
		Orion.Wait(500);
	}

	//Крутим цикл, пока не сбросим всю руду
	while (true)
	{
		//Поиск всех типов руды всех указанных цветов
		var list = Orion.FindType('0x19B7|0x19BA|0x19B8|0x19B9');

		//Ничего не нашлось - выходим
		if (!list.length)
			break;

		//Сбрасываем под ноги все что нашлось
		for (var i = 0; i < list.length; i++)
		{
			Orion.MoveItem(list[i], 0, OreBag);
			Orion.Wait('moveitemdelay');
		}

		Orion.Wait(100);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////
//Функция добора расходников
function ReloadConsumables()
{
	var types = ['bp', 'bm', 'mr'];

	for (var i = 0; i < types.length; i++)
	{
		var count = Orion.Count(types[i]);

		if (count < ReagentsCount)
		{
			var list = Orion.FindType(types[i], '-1', ResultContainer);

			if (!list.length)
			{
				Orion.Print('0x0021', 'Reagent is not found ' + types[i]);
				continue;
			}

			Orion.MoveItem(list[0], ReagentsCount / 2);
			Orion.Wait('moveitemdelay');
		}

		//Дополнительное время ожидания
		Orion.Wait('moveitemdelay');
	}

	var list = Orion.FindType(ToolType);

	if (list.length < ToolsCount)
	{
		var count = ToolsCount - list.length;

		var list = Orion.FindType(types[i], '-1', ResultContainer);

		if (!list.length)
			Orion.Print('0x0021', 'Tool is not found ' + types[i]);
		else
		{
			if (list.length < count)
				count = list.length;

			for (var i = 0; i < count; i++)
			{
				Orion.MoveItem(list[i]);
				Orion.Wait('moveitemdelay');
			}

			//Дополнительное время ожидания
			Orion.Wait('moveitemdelay');
		}
	}
}
///////////////////////////////////////////////////////////////////////////////////////////
//Функция реколла
function Recall(toHome)
{
	var x = Player.X();
	var y = Player.Y();

	while (true)
	{
		var time = Orion.Now();

		if (toHome)
			Orion.WaitTargetObject(RuneHomeSerial);
		else
			Orion.WaitTargetObject(RuneCaveSerial);

		Orion.Cast('Recall');

		for (var i = 0; i < 20; i++)
		{
			if (x != Player.X() || y != Player.Y())
				return;
			else if (Orion.InJournal(FizzlesText, 'my|sys', '0', '0xFFFF', time, Orion.Now()) != null)
				break;

			Orion.Wait(1000);
		}

		Orion.Wait(100);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////
//Фукнция разгрузки
function RecallUnload()
{
	//Реколл домой
	Recall(true);

	Orion.Wait(1000);

	//Разгрузка
	UnloadOres();

	Orion.Wait(1000);

	//Добор расходников
	ReloadConsumables();

	Orion.Wait(1000);

	//Реколл обратно в перещу
	Recall(false);

	//Проходимся по списку точек, возвращаемся на место, где стояли
	for (var i = 0; i < CurrentWayPoint; i++)
	{
		var point = WayPoints[i];

		//Пытаемся прийти на точку
		WalkToPoint(point[0], point[1]);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////
//Функция ходилки, можно добавить сюда что-то еще
function WalkToPoint(x, y)
{
	return Orion.WalkTo(x, y, 0, 0);
}
///////////////////////////////////////////////////////////////////////////////////////////
