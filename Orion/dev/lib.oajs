// Globals and constants
const scripts_path = Orion.CurrentScriptDirPath();
const reports_path = scripts_path + '/reports';
const pulse_time = 300;
var _recall = 4;
var gatetravel = 5;
var sacredtravel = 6;

/**
 * Description
 * @method contains
 * @param {} obj
 * @return Literal
 */
Array.prototype.contains = function(obj)
{
    var i = this.length;
    while (i--)
    {
        if (this[i] === obj)
        {
            return true;
        }
    }
    return false;
}

/**
 * Description
 * @method _createArr
 * @param {} x
 * @param {} y
 * @return arr
 */
function _createArr(x, y)
{
    var arr = new Array(x);
    for (var i = 0; i < x; i++)
    {
        arr[i] = new Array(y);
    }
    return arr;
}

/**
 * Description
 * @method _getSortOrder
 * @param {} prop
 * @return FunctionExpression
 */
function _getSortOrder(prop)
{
    return function(a, b)
    {
        if (a[prop].toUpperCase() > b[prop].toUpperCase())
        {
            return 1;
        }
        else if (a[prop].toUpperCase() < b[prop].toUpperCase())
        {
            return -1;
        }
        return 0;
    }
}

/**
 * Description
 * @method _removeDuplicates
 * @param {} arr
 * @param {} equals
 * @return arr
 */
function _removeDuplicates(arr, equals)
{
    var originalArr = arr.slice(0);
    var i, len, val;
    arr.length = 0;

    for (i = 0, len = originalArr.length; i < len; ++i)
    {
        val = originalArr[i];
        if (!arr.some(function(item)
            {
                return equals(item, val);
            }))
        {
            arr.push(val);
        }
    }
    return arr;
}

/**
 * Description
 * @method _arrayEquals
 * @param {} thing1
 * @param {} thing2
 * @return LogicalExpression
 */
function _arrayEquals(thing1, thing2)
{
    return thing1.X() === thing2.X() &&
        thing1.Y() === thing2.Y() &&
        thing1.Z() === thing2.Z();
}

/**
 * Description
 * @method format
 * @return formatted
 */
String.prototype.format = function()
{
    var formatted = this;
    for (var i = 0; i < arguments.length; i++)
    {
        var regexp = new RegExp('\\{' + i + '\\}', 'gi');
        formatted = formatted.replace(regexp, arguments[i]);
    }
    return formatted;
};


// Warn if overriding existing method
if (Array.prototype.equals)
    console.warn("Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.");
// attach the .equals method to Array's prototype to call it on any array
/**
 * Description
 * @method equals
 * @param {} array
 * @return Literal
 */
Array.prototype.equals = function(array)
{
    // if the other array is a falsy value, return
    if (!array)
        return false;
    // if the argument is the same array, we can be sure the contents are same as well
    if (array === this)
        return true;
    // compare lengths - can save a lot of time 
    if (this.length != array.length)
        return false;

    for (var i = 0, l = this.length; i < l; i++)
    {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array)
        {
            // recurse into the nested arrays
            if (!this[i].equals(array[i]))
                return false;
        }
        else if (this[i] != array[i])
        {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
}


/**
 * Description
 * @method _file_content_to_array
 * @param {} file
 * @param {} split_char
 * @return list_items
 */
function _file_content_to_array(file, split_char)
{
    schar = (split_char && split_char.length > 0) ? split_char : null;
    list_items = [];
    line = file.ReadLine();

    while (line.length > 0)
    {
        list_items.push(line.split(schar));
        line = file.ReadLine();
    }

    return list_items;

}

/**
 * Description
 * @method _number_to_string
 * @param {} number
 * @return num_string
 */
function _number_to_string(number)
{
    var num_string = String(number);
    if (number < 10)
    {
        num_string = '0' + String(number);
    }
    else if (num_string.length > 2)
    {
        num_string = '99';
    }

    return num_string;
}


/**
 * Description
 * @method _gold_to_string
 * @param {} gold
 * @return BinaryExpression
 */
function _gold_to_string(gold)
{
    var gold_value = 0;
    if (gold)
    {
        gold_value = gold;
    }
    else if (Orion.TimerExists('runTime') && _gold_read_from_ledger() - Shared.GetVar('startGold', 0) > 0)
    {
        gold_value = _gold_read_from_ledger() - Shared.GetVar('startGold', 0);
    }

    var k_string = '';
    while (parseInt(gold_value / 1000) > 0)
    {
        gold_value = parseInt(gold_value / 1000);
        k_string += 'k';
    }

    return String(gold_value) + k_string;
}


/**
 * Description
 * @method _sort_object_list_by_property
 * @param {array} list
 * @param {string} property
 * @return list of objects
 * @example sortByProperty(list, "age");
 */
function _sort_object_list_by_property(list, property) {
    list.sort(function(a, b) {
        if (a[property] < b[property]) {
            return -1;
        }
        if (a[property] > b[property]) {
            return 1;
        }
        return 0;
    });
    return list;
}

/**
 * takes a list of objects and an attribute, and returns an object that has the attribute values as keys and the corresponding objects as values
 * @method _sort_object_list_by_property
 * @param {array} list
 * @param {string} property
 * @return list of objects
 * @example sortByProperty(list, "age");
 */
function _list_of_objects_indexed_by_property(list, property) {
    var indexed = {};
    for (var i = 0; i < list.length; i++) {
        var obj = list[i];
        var key = obj[property];
        indexed[key] = obj;
    }
    return indexed;
}


// Source: http://stackoverflow.com/questions/497790
var dates = {
    to_days: 24 * 60 * 60 * 1000,
    /**
     * Converts the date in d to a date-object. 
     * @method convert
     * @param {type} d
     * @return date
     */
    convert: function(d)
    {
        // Converts the date in d to a date-object. The input can be:
        //   a date object: returned without modification
        //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.
        //   a number     : Interpreted as number of milliseconds
        //                  since 1 Jan 1970 (a timestamp) 
        //   a string     : Any format supported by the javascript engine, like
        //                  "YYYY/MM/DD", "MM/DD/YYYY", "Jan 31 2009" etc.
        //  an object     : Interpreted as an object with year, month and date
        //                  attributes.  **NOTE** month is 0-11.
        return (
            d.constructor === Date ? d :
            d.constructor === Array ? new Date(d[0], d[1], d[2]) :
            d.constructor === Number ? new Date(d) :
            d.constructor === String ? new Date(d) :
            typeof d === "object" ? new Date(d.year, d.month, d.date) :
            NaN
        );
    },
    /**
     * Compare two dates
     * @method compare
     * @param {date} a
     * @param {date} b
     * @return int
     */
    compare: function(a, b)
    {
        // Compare two dates (could be of any type supported by the convert
        // function above) and returns:
        //  -1 : if a < b
        //   0 : if a = b
        //   1 : if a > b
        // NaN : if a or b is an illegal date
        // NOTE: The code inside isFinite does an assignment (=).
        return (
            isFinite(a = this.convert(a).valueOf()) &&
            isFinite(b = this.convert(b).valueOf()) ?
            (a > b) - (a < b) :
            NaN
        );
    },
    /**
     * Checks if date in d is between dates in start and end
     * @method inRange
     * @param {date} d
     * @param {date} start
     * @param {date} end
     * @return boolean
     */
    inRange: function(d, start, end)
    {
        // Checks if date in d is between dates in start and end.
        // Returns a boolean or NaN:
        //    true  : if d is between start and end (inclusive)
        //    false : if d is before start or after end
        //    NaN   : if one or more of the dates is illegal.
        // NOTE: The code inside isFinite does an assignment (=).
        return (
            isFinite(d = this.convert(d).valueOf()) &&
            isFinite(start = this.convert(start).valueOf()) &&
            isFinite(end = this.convert(end).valueOf()) ?
            start <= d && d <= end :
            NaN
        );
    },
    /**
     * Adds days to a date
     * @method addDays
     * @param {date} date
     * @param {int} days to add
     * @return date
     */
    addDays: function(date, days)
    {
        var result = new Date(date);
        result.setDate(result.getDate() + days);
        return result;
    },
    /**
     * Substracts days from a date
     * @method substractDays
     * @param {date} date
     * @param {int} days to substract
     * @return result
     */
    substractDays: function(date, days)
    {
        var result = new Date(date);
        result.setDate(result.getDate() - days);
        return result;
    },
    /**
     * returns the difference from 2 dates in milliseconds
     * @method dateDiff
     * @param {date} date1
     * @param {date} date2
     * @return integer in milisseconds
     */
    dateDiff: function(date1, date2)
    {
        return Math.floor(date2 - date1);
    }
}


/**
 * Get a timestamp from the free webapi site timeapi.uo. Default timezone is US/Central (uo evo server) but you can use any from https://timeapi.io/api/TimeZone/AvailableTimeZones
 * @method _get_date_time
 * @param {string} timezone
 * @return date from timeapi.io
 */
function _get_date_time(timezone)
{
    var timezone = timezone == null ? 'US/Central' : timezone;
    response = Orion.HttpGet("https://www.timeapi.io/api/Time/current/zone?timeZone=" + timezone, '');
    if (response && response.length > 0)
    {
        response = JSON.parse(response)
        date = new Date(response.year, response.month - 1, response.day, response.hour, response.minute,
            response.seconds)
        return date;
    }
}
