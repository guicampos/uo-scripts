from ClassicAssist.UO.Data import Statics
from Assistant import Engine
from System import Convert
from ClassicAssist.UO import UOMath
from ClassicAssist.UO.Data import Direction
import System
import clr
import os

clr.AddReference('System.Core')
clr.ImportExtensions(System.Linq)

###################### I M P O R T A N T ##################
# this script reads your rune books once and writes a small file (1 kb) for each book on your 
# hard disk in a folder that you specify. Unfortunately, finding water targets is difficult in UO. 
# If I always look for tiles when panning, we would have to answer an afk check very, very often. 
# This approach finds the targets once, writes them to the files and the 'PanningLoop' script 
# reads these files and uses them to make its rounds.
# Method:
#  - Start the script
#  - click on the book
#  - wait for it to find all positions
#  - check if the file exists and if there are 16 lines.
#  - Repeat until all books have been read.
# If you want to change a book, just read it again. The script detects whether the file exists and 
# deletes the file before reading it in again.
# If you want to add a book, search the targets and the PanningLoop will find the book automatically.
############################################################

#change the path to your folder you like to store the book files. Please use the \\ to separate 
#the folders
pathToBooks = "D:\\Games\\Macros\\Data\\books\\"

# this are breaks for people with high pings ;) you can try to loweer them if your ping is fast
moveItemPause = 800
smallPause = 100
middlePause = 400

#you can choose how the script should handle the MiBs. If it is set to 'n', the MiBs 
#will be unpacked and included in the treasure key. If it is 'y' then the bottles are 
#pushed into a bag in the bank. This then requires the serial of the Cyratal and the bag in the bank.
extractMiBs = 'n'   
#the next two lines are only needed when extractMiBs = 'y'
bankCrystal = 0x51286e19
bankBag = 0x4266c61f

############ From here no more changes necessary ##############

searchRange = 4    
tiles = []
panTile = []
recallPlace = []

#if the path not exists we will create the folder
if not os.path.exists(pathToBooks):
    os.makedirs(pathToBooks)

#travelSpell c = chiv, r = magery
def travel(runeBook = None, place = None, travelSpell = 'c'):
    if runeBook is None or place is None:
        return False
    if travelSpell != 'c' and travelSpell != 'r':
        return False
    if travelSpell == 'c':
        bookPos = place * 6 + 1
    if travelSpell == 'r': 
        bookPos = place * 6 - 1
    ClearJournal()
    UseObject(runeBook)
    Pause(smallPause)
    WaitForGump(0x554b87f3, 5000)
    Pause(middlePause)
    if InJournal('time to recharge'):
        Pause(3000)
        travel(runeBook, place, travelSpell)
        Pause(smallPause)
    ReplyGump(0x554b87f3, bookPos)
    Pause(2500)
    if InJournal('location is blocked'):
        return False
    return True

def findPanTarget(tiles, searchRadius):
    for tile in tiles:
        UseType(0x9d7,0,'backpack')
        WaitForTarget(5000)
        Pause(middlePause)
        TargetXYZ(tile['X'], tile['Y'], tile['Z'], tile['ID'])
        Pause(middlePause)
        if InJournal("Target cannot", "system"): 
            ClearJournal()
            continue
        if InJournal("to be closer", "system"): 
            ClearJournal()
            continue        
        Pause(11000)
        if FindType(0x9d8, -1, 'backpack', 0):
            UseObject("found")
        if InJournal("around until your pan is full", "system") or InJournal("fail to find any nuggets", "system"): 
            panTile = [tile['X'], tile['Y'], tile['Z'], tile['ID']]
            ClearJournal()
            return panTile
        if InJournal("seem to be any", "system"): 
            panTile = [tile['X'], tile['Y'], tile['Z'], tile['ID']]
            ClearJournal()
            return panTile

def getTiles(searchRadius):
    waterTiles = [ 0x179c, 0x1798, 0x1797, 0x1799, 0x179b, 0x179a, 0xa9, 0xa8, 0xab, 0xaa, 0x17ad]
    #global tiles
    for x in range(Engine.Player.X - searchRadius, Engine.Player.X + searchRadius):
        for y in range(Engine.Player.Y - searchRadius, Engine.Player.Y + searchRadius):
            statics = Statics.GetStatics(Convert.ChangeType(Engine.Player.Map, int), x, y)
            #print((statics))
            try:
                for s in statics:
                    if waterTiles.Contains(s.ID):
                        tiles.append({'X': s.X, 'Y': s.Y, 'Z': s.Z, 'ID': s.ID, 'Distance': UOMath.Distance(Engine.Player.X, Engine.Player.Y, s.X, s.Y)})
            except:
                continue    
    return tiles

def checkGoldpan():
    Pause(smallPause)
    if FindType(0x9d7, -1, 'backpack', 0):
        return True
    if FindType(0x9d8, -1, 'backpack', 0):
        UseObject("found")
        Pause(smallPause)
        return True
    return False
    
def getGoldpan():
    if FindType(0x9d7, -1, 'backpack', 1992):
        SetAlias('goldpan', 'found')
        UseObject('goldpan')
        Pause(middlePause)
        ReplyGump(0x6abce12, 4)
        WaitForGump(0x6abce12, 5000)   
        ReplyGump(0x6abce12, 0)
        if checkGoldpan():
            return True
        else:
            getGoldpan()
    else:
        HeadMsg("**** cant find a goldpan storage found ****", 'self', 82)  
        Pause(smallPause)
        return False

def fillGoldKey():
    if FindType(0x9d7, -1, 'backpack', 1992):
        WaitForContext('found', 2, 5000)
        WaitForGump(0x6abce12, 5000)
        ReplyGump(0x6abce12, 0)
        return True
    else:
        HeadMsg("**** cant find a goldpan storage found ****", 'self', 82)  
        Pause(smallPause)
        return False

def trashLoot():
    if FindType(0x9b2, -1, 'backpack', 1173):
        SetAlias('trashbag', 'found')
        trashList = [0x170f, 0x170b, 0x1711, 0x2307]
        for trash in trashList:
            while FindType(trash, -1, 'backpack', -1):
                worldSave()
                MoveItem('found', 'trashbag')
                Pause(moveItemPause)
                IgnoreObject('found')
        if FindType(0x176b, -1, 'backpack', -1):
                Msg("[ffp")
                Pause(middlePause)                
        return True
    else:
        HeadMsg("*** cant find a trash bag, please check it ***", 'self', 82)  
        Pause(smallPause)
        return False
    
def clearMiBs(extractMiBs):
    if not FindType(0x99f, -1, 'backpack',0):
        return False
    if extractMiBs == 'y':
        if FindType(0x14ee,-1,'backpack',1861):
            SetAlias('treasureKey', 'found')
            while FindType(0x99f, -1, 'backpack',0):
                worldSave()
                UseObject('found')
                Pause(middlePause)
            if FindType(0x176b, -1, 'backpack', -1):
                Msg("[ffp")
                Pause(middlePause)
            else: 
                WaitForContext('treasureKey', 2, 5000)
                WaitForGump(0x6abce12, 5000)
                ReplyGump(0x6abce12, 0)    
                Pause(smallPause)
            return True
        else:
            HeadMsg("*** cant find a treasure key, please check it ***", 'self', 82)  
            Pause(smallPause)
            return False
    else:        
        worldSave()
        if FindObject(bankCrystal , -1, 'backpack'):
            UseObject(bankCrystal)
            Pause(middlePause)
            while FindType(0x99f, -1, 'backpack',0):
                MoveItem('found', bankBag)
                Pause(moveItemPause)
            return True
        else:
            HeadMsg("*** cant find a bank crystal, please check it ***", 'self', 82)  
            Pause(smallPause)
            return False    

def checkFileName(filePath):
    if os.path.exists(filePath):
        os.remove(filePath)



#Prompt the runebook to search the targets
HeadMsg("Please target a Runebook with 16 Goldpanning Spots..", 'self', 82)  
Pause(smallPause)
PromptMacroAlias("runebook")
runebook = GetAlias('runebook')
checkFileName(pathToBooks + hex(runebook) + '.txt')

for i in range(1,17):
    tiles = []
    while not travel(runebook, i, 'c'):
        Pause(smallPause)
    #print(i)
    HeadMsg('{} - Pos: {}'.format(hex(runebook), i))  
    Pause(moveItemPause)
    if not checkGoldpan():
        if not getGoldpan():
            Stop()
    
    for r in range(1,6):
        tiles = getTiles(r)
        #print(tiles)
        location = findPanTarget(tiles, r)
        if location is not None:
            break
    recallPlace = [Engine.Player.X, Engine.Player.Y, Engine.Player.Z]
    fileName = pathToBooks + str(hex(runebook)) + '.txt'
    string = (str(i) + ":" + str(recallPlace) + ":" + str(location) + "\n").replace('[','').replace(']','')
    
    with open(fileName, "a") as fh:
        fh.write(string)
    trashLoot()
    fillGoldKey()
    clearMiBs(extractMiBs)
    
HeadMsg("All Spots are recorded, please check the File.. ", 'self', 82)  
Pause(smallPause)

        
        
        
        
        
        
        
        
        
        
        
        